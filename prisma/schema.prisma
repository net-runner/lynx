generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Review {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  score       Int
  description String     @db.VarChar
  creator     String     @db.Uuid
  creatorId   User       @relation(fields: [creator], references: [id], onDelete: Cascade, onUpdate: NoAction)
  group       String?    @db.Uuid
  link        String?    @db.Uuid
  groupId     LinkGroup? @relation(fields: [group], references: [id], onDelete: Cascade, onUpdate: NoAction)
  linkId      Link?      @relation(fields: [link], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model LinkGroup {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  owner        String?    @db.Uuid
  name         String     @db.VarChar
  description  String     @db.VarChar
  picture      String     @db.VarChar @default("")
  stars        Int        @default(0)
  watcherCount Int        @default(0)
  linkedCount  Int        @default(0)
  linksAmount Int        @default(0)
  privacyLevel Int        @default(0)
  userId       User?      @relation(fields: [owner], references: [id], onDelete: Cascade, onUpdate: NoAction)
  links        Link[]
  reviews      Review[]
  tags         GroupTag[]
}

model Link {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  link         String     @db.VarChar
  privacyLevel Int        @default(0)
  owner        String?    @db.Uuid
  stars        Int        @default(0)
  description  String?
  group        String?    @db.Uuid
  userId       User?      @relation(fields: [owner], references: [id], onDelete: Cascade, onUpdate: NoAction)
  groupId      LinkGroup? @relation(fields: [group], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tags         LinkTag[]
  reviews      Review[]

  @@index([owner], map: "fki_links_owner_fkey")
}

model Session {
  user      String   @db.Uuid
  valid     Boolean  @default(true)
  createdAt DateTime @default(dbgenerated("CURRENT_DATE")) @db.Date
  updatedAt DateTime @default(dbgenerated("CURRENT_DATE")) @db.Date
  userAgent String?  @db.VarChar
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    User     @relation(fields: [user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "sessions_owner_fkey")
}

model User {
  id           String      @id(map: "users_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String      @db.VarChar
  email        String      @db.VarChar
  password     String      @db.VarChar
  createdAt    DateTime    @default(dbgenerated("CURRENT_DATE")) @db.Date
  lastLogin    DateTime    @default(dbgenerated("CURRENT_DATE")) @db.Date
  authProvider Int         @default(0)
  roleId       UserRole[]
  links        Link[]
  sessions     Session[]
  linkGroups   LinkGroup[]
  reviews      Review[]

  @@unique([email], map: "unique_email")
}

model UserRole {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user   String @db.Uuid
  role   String @db.Uuid
  userId User   @relation(fields: [user], references: [id], onDelete: Cascade, onUpdate: NoAction)
  roleId Role   @relation(fields: [role], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Role {
  id    String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String     @db.VarChar
  roles UserRole[]

  @@unique([name], map: "unique_name")
}

model Tag {
  id     String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name   String     @db.VarChar
  Groups GroupTag[]
  Links  LinkTag[]

  @@unique([name], map: "unique_tag")
}

model GroupTag {
  id      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  group   String    @db.Uuid
  tag     String    @db.Uuid
  groupId LinkGroup @relation(fields: [group], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tagId   Tag       @relation(fields: [tag], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model LinkTag {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  link    String @db.Uuid
  tag     String @db.Uuid
  groupId Link   @relation(fields: [link], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tagId   Tag    @relation(fields: [tag], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
