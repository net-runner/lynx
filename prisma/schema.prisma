generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Review {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  score       Int
  description String     @db.VarChar
  creatorName String     @db.VarChar
  creator     User       @relation(fields: [creatorName], references: [username], onDelete: Cascade, onUpdate: NoAction)
  groupId     String?    @db.Uuid
  link        String?    @db.Uuid
  group       LinkGroup? @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  linkId      Link?      @relation(fields: [link], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([creatorName, groupId], map: "unique_reviewer_per_group")
}

model LinkGroup {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  owner        String     @db.VarChar
  groupname    String     @db.VarChar
  name         String     @db.VarChar
  description  String     @db.VarChar
  picture      String     @default("") @db.VarChar
  stars        Float      @default(0)
  watcherCount Int        @default(0)
  linkedCount  Int        @default(0)
  linksCount   Int        @default(0)
  privacyLevel Int        @default(0)
  user         User?      @relation(fields: [owner], references: [username], onDelete: Cascade, onUpdate: NoAction)
  links        Link[]
  reviews      Review[]
  tags         GroupTag[]

  @@unique([owner, groupname], map: "unique_groupname_per_owner")
  @@index([owner], map: "lg_owner_fkey")
}

model Link {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  link         String     @db.VarChar
  privacyLevel Int        @default(0)
  owner        String?    @db.Uuid
  stars        Float      @default(0)
  description  String?    @db.VarChar
  groupId      String?    @db.Uuid
  user         User?      @relation(fields: [owner], references: [id], onDelete: Cascade, onUpdate: NoAction)
  group        LinkGroup? @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tags         LinkTag[]
  reviews      Review[]

  @@index([owner], map: "fki_links_owner_fkey")
}

model Session {
  userId       String   @db.Uuid
  valid        Boolean  @default(true)
  createdAt    DateTime @default(dbgenerated("CURRENT_DATE")) @db.Date
  updatedAt    DateTime @default(dbgenerated("CURRENT_DATE")) @db.Date
  userAgent    String?  @db.VarChar
  ip           String   @db.VarChar
  authProvider Int      @default(0)
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "sessions_owner_fkey")
}

model User {
  id           String      @id(map: "users_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String      @db.VarChar
  username     String      @db.VarChar
  email        String      @db.VarChar
  password     String      @db.VarChar
  createdAt    DateTime    @default(dbgenerated("CURRENT_DATE")) @db.Date
  lastLogin    DateTime    @default(dbgenerated("CURRENT_DATE")) @db.Date
  authProvider Int         @default(0)
  roles        UserRole[]
  links        Link[]
  sessions     Session[]
  linkGroups   LinkGroup[]
  reviews      Review[]

  @@unique([email], map: "unique_email")
  @@unique([username], map: "unique_username")
}

model UserRole {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String @db.Uuid
  roleId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Role {
  id    String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String     @db.VarChar
  roles UserRole[]

  @@unique([name], map: "unique_name")
}

model Tag {
  id     String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name   String     @db.VarChar
  Groups GroupTag[]
  Links  LinkTag[]

  @@unique([name], map: "unique_tag")
}

model GroupTag {
  id      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  groupId String    @db.Uuid
  tagId   String    @db.Uuid
  group   LinkGroup @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tag     Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([groupId, tagId], map: "unique_tag_per_group")
}

model LinkTag {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  linkId String @db.Uuid
  tagId  String @db.Uuid
  group  Link   @relation(fields: [linkId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([linkId, tagId], map: "unique_tag_per_link")
}
